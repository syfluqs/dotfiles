#!/bin/bash

#mini launcher script: codename-o
version='1.8'

# made by syfluqs <syfluqs@gmail.com>

######################################
#	 _____     ____              #
#	|_   _|__ |  _ \  ___        #
#	  | |/ _ \| | | |/ _ \       #
#	  | | (_) | |_| | (_) |      #
#	  |_|\___/|____/ \___/       #
#                                    #
######################################
#                                    #
# => add google chrome searching and #
#    bookmarking support.            #
# => add daemon mode.                #
# => add logging tool                #
# => add todo functionality          #
#				     #
######################################

#settings variables
use_fancy_text=1

# some standard paths and variables
docs=${HOME}'/Documents/'
down=${HOME}'/Downloads/'
pics=${HOME}'/Pictures/'
git=${docs}'git/'
sdir=$(cd $(dirname "$0"); pwd)
todofile=${HOME}'/.o/todo'
browser=google-chrome

editor()
{
#lxterminal -e "vim "$1
if [[ ${TERM} == "linux" ]]
then
vim $@
else
gvim $@
fi
}

# some colors down here are used by the msg and err methods
red='\e[1;31m'
end='\e[0m'
cyan='\e[0;36m'
cyanb='\e[1;36m'
tdred='\e[1;31m'
tdgreen='\e[0;32m'
tdwhite='\e[0;37m'

# some functions
copm()
{

#copm checks for figlet , for displaying
#text in fancy format.
#These should be present if variable use_fancy_text is set to 1
#Then the user will be asked to install the missing package.
#If not default echo command will be used.

f=$(command -v figlet)
c=$(command -v cowsay)

if [[ -f $f ]]; then f=1; else f=0; fi
if [[ -f $c ]]; then c=1; else c=0; fi

if [[ $use_fancy_text -eq 1 && $f -eq 0 ]]
then
inst "figlet" "sys"
fi

}

#Calling copm
copm

msg()
{

#msg displays standard messages in cyan color.

echo -e ${cyan}${1}${end}
}

err()
{
#err displays standard errors in red bold color.
echo -e ${red}${1}${end}
}

checkX()
{
#checks if X is running, if not starts X
if [[ -f /tmp/.X0-lock ]]
then
msg "X is running, falling back..." 
else
msg "X is not running. Starting X... "
startx
fi
}

help()
{
#just displays some text if o is run without arguements.
msg "o launcher v"$version
echo ""
echo "Usage: o [OPTION1] [OPTION2]..."
echo ""
echo "Made by syfluqs <syfluqs@gmail.com>"
}

inst()
{
#installs provided package name.
#if an extra string sys is provided it first asks 
#user whether to install the package or not.

if [[ $2 == "sys" ]]
then
echo -e "The package "${cyan}${1}${end}" is needed by o launcher but not found \non the system. Download and install "${1}"? [y/n]" && read choice

if [[ ${choice} == "y" || ${choice} == "yes" ]]
then
sudo apt-get install ${1} && msg "Successfully installed "${1}"."
else
msg "Installation aborted."
fi

else
sudo apt-get install ${1} && msg "Successfully installed "${1}"."
fi
}

getnetUsage()
{
#displays total transfer bytes through eth0 by default.
down=$(ifconfig eth0 | grep "RX bytes" | cut -d':' -f 2 | cut -d' ' -f 1)
up=$(ifconfig eth0 | grep "RX bytes" | cut -d':' -f 3 | cut -d' ' -f 1)
total=$(echo scale=2 \; \(${down}+${up}\)/1000000 | bc)

echo ${total}
}

getUptime()
{
#displays uptime
if [[ $use_fancy_text -eq 1 ]]
then
figlet -c -k $(uptime | cut -d',' -f 1 | cut -d' ' -f 5)
else
err $(uptime | cut -d',' -f 1 | cut -d' ' -f 5)
fi
#err $(uptime | cut -d',' -f 1 | cut -d' ' -f 5)
}

goGit()
{
#goGit automatically stages, commits and pushes o files
#dotfiles repo to github.

cd $git'dotfiles' &&
msg "Removing previous version." &&
rm -f o &&
msg "Copying version "${version}" in repo." &&
cp $sdir'/o' $git'dotfiles/o' &&
msg "All exporting done." &&
msg "========================" &&
msg "Now uploading to Github." &&
msg "Staging to local repo." &&
git add o &&
msg "Committing to local repo." &&
git commit -m 'updated o launcher v'${version}'.'
msg "Now uploading..." &&
msg "Please enter your Github username and password when prompted:" &&
git push -u dotfiles master &&
if [[ $c -eq 1 && $use_fancy_text -eq 1 ]]
then
cowsay "All done! Sent o to Github."
else
msg "All done! Sent o to Github."
fi
}

backup()
{
#copies the o file to ~/.o/bak before editing
#msg "Creating a backup..."
if [[ ! -f ${HOME}/.o/bak/o ]]; then touch ${HOME}/.o/bak/o; fi
cp -T -f ${sdir}/o ${HOME}/.o/bak/o
#making a timestamp
echo "# Last backup: "$(echo "%r" | date) >> ${HOME}/.o/bak/o
}

kll()
{
#kills the process whose pid or name is supplied as parameter.
#first determining whether pid or name is supplied.
if [[ $(echo ${1} | grep "^-\?[0-9]*$") == ${1} ]]
then
kill ${1}
else
killall ${1}
fi
}

prs()
{
if [[ $# -eq 0 ]]
then
ps -u root cat
else
ps -u root cat | grep ${1} ${2}
fi
}

browser()
{
#search google for arguement
google-chrome
}

blue()
{
bluetooth-applet &
bluetooth-sendto &
}

ed()
{
if [[ ${1} == "" ]]
then
backup && editor /usr/local/sbin/o &
else
msg "Opening "${1} && editor ${1} &
fi
}

daemon()
{
msg "daemon mode not yet implemented..."
}

todo()
{
#adding to todo
if [[ $2 == "add" ]]
then
cmd=$@
#separating the priority and tha task
priority=$(echo ${cmd} | cut -d' ' -f 3)
task=$(echo ${cmd} | sed "s/todo\ add\ "${priority}"\ /|/" | cut -d'|' -f 2)
#appending to $todofile
echo "n|"${priority}"|"${task} >> $todofile
o todo

#purging tasks in todo
elif [[ $2 == "purge" ]]
then
index=$3
sed -i ${index}"d" $todofile
o todo

#manual editing
elif [[ $2 == "edit" ]]
then
o edit $todofile

#toggle the task status
elif [[ $2 == "strike" ]]
then
index=$3
sed -i ${index}"s/n/y/" $todofile
o todo

else
{
if [[ $(stat -c %s $todofile) == "0" ]]
then
echo -e ${tdgreen}"== Your todo list is empty. =="${end}
else
{
lno=0
while read line
do
{
#incrementing lno
lno=$(echo ${lno}+1 | bc)
#figuring out the task priority
priority=$(echo ${line,,} | cut -d'|' -f 2)
#color codes for priority
case $priority in
	"a") color=$tdred ;;
	"b") color=$tdgreen ;;
	"c") color=$tdwhite ;;
	*) color=$tdwhite ;;
esac
#figuring out the task
task=$(echo ${line} | cut -d'|' -f 3)
#laying out everything
printf ${lno}"> "
case $(echo ${line,,} | cut -d'|' -f 1) in
	"y") echo -e ${color}$(echo $task | sed "s/./&\xCC\xB6/g")${end} ;;
	*) echo -e ${color}${task}${end} ;;
esac

}
done < $todofile

}
fi
}

fi


}

#make ~/.o directory and subdirectories if not present.
#~/.o is needed for storing backups in bak and temp files
#in tmp dir.
if [[ ! -d ${HOME}/.o ]]; then msg "On an unrelated note a ~/.o directory was not found, so I am making one..." && mkdir ${HOME}/.o ${HOME}/.o/tmp ${HOME}/.o/bak ${HOME}/.o/log && touch $todofile; fi

#checking out the parameters
case $1 in
   "aw") sudo echo 'exec awesome'> ${HOME}/.xinitrc && msg 'AwesomeWM is activated.' && checkX;;
   "lx") sudo echo 'exec lxsession'> ${HOME}/.xinitrc && msg 'LXDE is activated.' && checkX;;
   "bb") sudo echo 'exec blackbox'> $HOME/.xinitrc && msg 'Blackbox is activated.' && checkX;;
   "e16") sudo echo 'exec e16'> $HOME/.xinitrc && msg 'E16 is activated.' && checkX;;
   "bsend") blue ;;
   "blby") blobby &;;
   "ff") /home/knoppix/scripts/firefox/firefox/firefox &;;
   "lk") clear && figlet -c -k JARVIS Locked && msg "Do NOT touch anything. You are being watched." && xtrlock && clear;;
   "alsa") lxterminal -e alsamixer &;;
   "f") pcmanfm $2 &;;
   "s") startx &;;
   "neongc") o neon 1> /dev/null && o gc & ;;
   "neon") sudo ifconfig eth0 up;;
   "neof") sudo ifconfig eth0 down;;
   "neus") getnetUsage $2;;
   "neco") sudo pppoeconf ;;
   "up") getUptime ;;
   "gc") google-chrome $2 $3 $4 $5 $6 $7 2> /dev/null &;;
   "docs") pcmanfm ${docs}${2} &;;
   "down") pcmanfm ${down}${2} &;;
   "pics") pcmanfm ${pics}${2} &;;
   "edit") ed $2 $3 $4 ;;
   "open") sudo pcmanfm /usr/local/sbin/ &;;
   "git") pcmanfm ${git}${2} &;;
   "gogit") goGit;;
   "bak") backup ;;
   "msg") msg ${2};;
   "comp") xcompmgr -n -S & ;;
   "todo") todo $@ ;;
   "ls") ls -a | grep ${1} ${2} ;;
   "i") inst $2;;
   "k") kll $2 ;;
   "p") prs $2 $3;;
   "c") clear ;;
   "") help ;;
   "m") deadbeef --play-pause &;;
   "d") daemon ;;
   #if parameters doesn't match then just run what is passed.
   *) $@ &;;
esac

#Good bye...
exit 0

#snippets:
#focused=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)
#
#gets the window ID of most recent opened window
#
#window_id=$(wmctrl -l | grep "$1" | tail -1 | cut -f1 -d" ")
#
#BLACK=$(tput setaf 0)
#RED=$(tput setaf 1)
#GREEN=$(tput setaf 2)
#YELLOW=$(tput setaf 3)
#LIME_YELLOW=$(tput setaf 190)
#POWDER_BLUE=$(tput setaf 153)
#BLUE=$(tput setaf 4)
#MAGENTA=$(tput setaf 5)
#CYAN=$(tput setaf 6)
#WHITE=$(tput setaf 7)
#BRIGHT=$(tput bold)
#NORMAL=$(tput sgr0)
#BLINK=$(tput blink)
#REVERSE=$(tput smso)
#UNDERLINE=$(tput smul)
